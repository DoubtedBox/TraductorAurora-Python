# Generated from grammarProyecto.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,382,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        5,21,262,8,21,10,21,12,21,265,9,21,1,22,4,22,268,8,22,11,22,12,22,
        269,1,23,4,23,273,8,23,11,23,12,23,274,1,23,1,23,4,23,279,8,23,11,
        23,12,23,280,1,24,1,24,5,24,285,8,24,10,24,12,24,288,9,24,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
        31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,4,
        37,317,8,37,11,37,12,37,318,1,37,1,37,1,38,4,38,324,8,38,11,38,12,
        38,325,1,39,4,39,329,8,39,11,39,12,39,330,1,40,1,40,1,40,1,40,5,
        40,337,8,40,10,40,12,40,340,9,40,1,40,1,40,1,41,1,41,1,41,1,42,1,
        42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,
        47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,0,0,52,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,103,52,1,0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,32,32,
        1,0,9,9,2,0,10,10,13,13,390,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,
        0,3,111,1,0,0,0,5,118,1,0,0,0,7,127,1,0,0,0,9,134,1,0,0,0,11,143,
        1,0,0,0,13,146,1,0,0,0,15,155,1,0,0,0,17,160,1,0,0,0,19,165,1,0,
        0,0,21,171,1,0,0,0,23,182,1,0,0,0,25,193,1,0,0,0,27,202,1,0,0,0,
        29,210,1,0,0,0,31,219,1,0,0,0,33,226,1,0,0,0,35,230,1,0,0,0,37,238,
        1,0,0,0,39,245,1,0,0,0,41,250,1,0,0,0,43,259,1,0,0,0,45,267,1,0,
        0,0,47,272,1,0,0,0,49,282,1,0,0,0,51,291,1,0,0,0,53,293,1,0,0,0,
        55,295,1,0,0,0,57,297,1,0,0,0,59,299,1,0,0,0,61,301,1,0,0,0,63,303,
        1,0,0,0,65,305,1,0,0,0,67,307,1,0,0,0,69,309,1,0,0,0,71,311,1,0,
        0,0,73,313,1,0,0,0,75,316,1,0,0,0,77,323,1,0,0,0,79,328,1,0,0,0,
        81,332,1,0,0,0,83,343,1,0,0,0,85,346,1,0,0,0,87,349,1,0,0,0,89,351,
        1,0,0,0,91,353,1,0,0,0,93,356,1,0,0,0,95,359,1,0,0,0,97,361,1,0,
        0,0,99,363,1,0,0,0,101,366,1,0,0,0,103,376,1,0,0,0,105,106,5,99,
        0,0,106,107,5,114,0,0,107,108,5,101,0,0,108,109,5,97,0,0,109,110,
        5,114,0,0,110,2,1,0,0,0,111,112,5,101,0,0,112,113,5,110,0,0,113,
        114,5,116,0,0,114,115,5,101,0,0,115,116,5,114,0,0,116,117,5,111,
        0,0,117,4,1,0,0,0,118,119,5,102,0,0,119,120,5,108,0,0,120,121,5,
        111,0,0,121,122,5,116,0,0,122,123,5,97,0,0,123,124,5,110,0,0,124,
        125,5,116,0,0,125,126,5,101,0,0,126,6,1,0,0,0,127,128,5,99,0,0,128,
        129,5,97,0,0,129,130,5,100,0,0,130,131,5,101,0,0,131,132,5,110,0,
        0,132,133,5,97,0,0,133,8,1,0,0,0,134,135,5,98,0,0,135,136,5,111,
        0,0,136,137,5,111,0,0,137,138,5,108,0,0,138,139,5,101,0,0,139,140,
        5,97,0,0,140,141,5,110,0,0,141,142,5,111,0,0,142,10,1,0,0,0,143,
        144,5,115,0,0,144,145,5,105,0,0,145,12,1,0,0,0,146,147,5,101,0,0,
        147,148,5,110,0,0,148,149,5,116,0,0,149,150,5,111,0,0,150,151,5,
        110,0,0,151,152,5,99,0,0,152,153,5,101,0,0,153,154,5,115,0,0,154,
        14,1,0,0,0,155,156,5,115,0,0,156,157,5,105,0,0,157,158,5,110,0,0,
        158,159,5,111,0,0,159,16,1,0,0,0,160,161,5,112,0,0,161,162,5,97,
        0,0,162,163,5,114,0,0,163,164,5,97,0,0,164,18,1,0,0,0,165,166,5,
        104,0,0,166,167,5,97,0,0,167,168,5,115,0,0,168,169,5,116,0,0,169,
        170,5,97,0,0,170,20,1,0,0,0,171,172,5,105,0,0,172,173,5,110,0,0,
        173,174,5,99,0,0,174,175,5,114,0,0,175,176,5,101,0,0,176,177,5,109,
        0,0,177,178,5,101,0,0,178,179,5,110,0,0,179,180,5,116,0,0,180,181,
        5,111,0,0,181,22,1,0,0,0,182,183,5,100,0,0,183,184,5,101,0,0,184,
        185,5,99,0,0,185,186,5,114,0,0,186,187,5,101,0,0,187,188,5,109,0,
        0,188,189,5,101,0,0,189,190,5,110,0,0,190,191,5,116,0,0,191,192,
        5,111,0,0,192,24,1,0,0,0,193,194,5,109,0,0,194,195,5,105,0,0,195,
        196,5,101,0,0,196,197,5,110,0,0,197,198,5,116,0,0,198,199,5,114,
        0,0,199,200,5,97,0,0,200,201,5,115,0,0,201,26,1,0,0,0,202,203,5,
        102,0,0,203,204,5,117,0,0,204,205,5,110,0,0,205,206,5,99,0,0,206,
        207,5,105,0,0,207,208,5,111,0,0,208,209,5,110,0,0,209,28,1,0,0,0,
        210,211,5,114,0,0,211,212,5,101,0,0,212,213,5,116,0,0,213,214,5,
        111,0,0,214,215,5,114,0,0,215,216,5,110,0,0,216,217,5,97,0,0,217,
        218,5,114,0,0,218,30,1,0,0,0,219,220,5,105,0,0,220,221,5,110,0,0,
        221,222,5,105,0,0,222,223,5,99,0,0,223,224,5,105,0,0,224,225,5,111,
        0,0,225,32,1,0,0,0,226,227,5,102,0,0,227,228,5,105,0,0,228,229,5,
        110,0,0,229,34,1,0,0,0,230,231,5,97,0,0,231,232,5,114,0,0,232,233,
        5,114,0,0,233,234,5,101,0,0,234,235,5,103,0,0,235,236,5,108,0,0,
        236,237,5,111,0,0,237,36,1,0,0,0,238,239,5,109,0,0,239,240,5,97,
        0,0,240,241,5,116,0,0,241,242,5,114,0,0,242,243,5,105,0,0,243,244,
        5,122,0,0,244,38,1,0,0,0,245,246,5,108,0,0,246,247,5,101,0,0,247,
        248,5,101,0,0,248,249,5,114,0,0,249,40,1,0,0,0,250,251,5,101,0,0,
        251,252,5,115,0,0,252,253,5,99,0,0,253,254,5,114,0,0,254,255,5,105,
        0,0,255,256,5,98,0,0,256,257,5,105,0,0,257,258,5,114,0,0,258,42,
        1,0,0,0,259,263,7,0,0,0,260,262,7,1,0,0,261,260,1,0,0,0,262,265,
        1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,44,1,0,0,0,265,263,1,
        0,0,0,266,268,7,2,0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,
        0,0,0,269,270,1,0,0,0,270,46,1,0,0,0,271,273,7,2,0,0,272,271,1,0,
        0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,276,1,0,
        0,0,276,278,5,46,0,0,277,279,7,2,0,0,278,277,1,0,0,0,279,280,1,0,
        0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,48,1,0,0,0,282,286,5,34,
        0,0,283,285,8,3,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,
        0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,5,34,
        0,0,290,50,1,0,0,0,291,292,5,43,0,0,292,52,1,0,0,0,293,294,5,45,
        0,0,294,54,1,0,0,0,295,296,5,42,0,0,296,56,1,0,0,0,297,298,5,47,
        0,0,298,58,1,0,0,0,299,300,5,61,0,0,300,60,1,0,0,0,301,302,5,40,
        0,0,302,62,1,0,0,0,303,304,5,41,0,0,304,64,1,0,0,0,305,306,5,58,
        0,0,306,66,1,0,0,0,307,308,5,44,0,0,308,68,1,0,0,0,309,310,5,59,
        0,0,310,70,1,0,0,0,311,312,5,91,0,0,312,72,1,0,0,0,313,314,5,93,
        0,0,314,74,1,0,0,0,315,317,7,4,0,0,316,315,1,0,0,0,317,318,1,0,0,
        0,318,316,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,321,6,37,0,
        0,321,76,1,0,0,0,322,324,7,5,0,0,323,322,1,0,0,0,324,325,1,0,0,0,
        325,323,1,0,0,0,325,326,1,0,0,0,326,78,1,0,0,0,327,329,7,6,0,0,328,
        327,1,0,0,0,329,330,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,
        80,1,0,0,0,332,333,5,47,0,0,333,334,5,47,0,0,334,338,1,0,0,0,335,
        337,8,6,0,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,
        339,1,0,0,0,339,341,1,0,0,0,340,338,1,0,0,0,341,342,6,40,0,0,342,
        82,1,0,0,0,343,344,5,61,0,0,344,345,5,61,0,0,345,84,1,0,0,0,346,
        347,5,33,0,0,347,348,5,61,0,0,348,86,1,0,0,0,349,350,5,62,0,0,350,
        88,1,0,0,0,351,352,5,60,0,0,352,90,1,0,0,0,353,354,5,62,0,0,354,
        355,5,61,0,0,355,92,1,0,0,0,356,357,5,60,0,0,357,358,5,61,0,0,358,
        94,1,0,0,0,359,360,5,121,0,0,360,96,1,0,0,0,361,362,5,111,0,0,362,
        98,1,0,0,0,363,364,5,110,0,0,364,365,5,111,0,0,365,100,1,0,0,0,366,
        367,5,118,0,0,367,368,5,101,0,0,368,369,5,114,0,0,369,370,5,100,
        0,0,370,371,5,97,0,0,371,372,5,100,0,0,372,373,5,101,0,0,373,374,
        5,114,0,0,374,375,5,111,0,0,375,102,1,0,0,0,376,377,5,102,0,0,377,
        378,5,97,0,0,378,379,5,108,0,0,379,380,5,115,0,0,380,381,5,111,0,
        0,381,104,1,0,0,0,10,0,263,269,274,280,286,318,325,330,338,1,6,0,
        0
    ]

class grammarProyectoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CREAR = 1
    ENTERO = 2
    FLOTANTE = 3
    CADENA = 4
    BOOLEANO = 5
    SI = 6
    ENTONCES = 7
    SINO = 8
    PARA = 9
    HASTA = 10
    INCREMENTO = 11
    DECREMENTO = 12
    MIENTRAS = 13
    FUNCION = 14
    RETORNAR = 15
    INICIO = 16
    FIN = 17
    ARREGLO = 18
    MATRIZ = 19
    LEER = 20
    ESCRIBIR = 21
    ID = 22
    CONT = 23
    FLOAT = 24
    STRING = 25
    PLUS = 26
    MINUS = 27
    MULT = 28
    DIVI = 29
    EQUALS = 30
    LPAREN = 31
    RPAREN = 32
    COLON = 33
    COMMA = 34
    SEMICOLON = 35
    LBRACKET = 36
    RBRACKET = 37
    WS = 38
    INDENT = 39
    NEWLINE = 40
    COMMENT = 41
    IGUAL = 42
    DIFERENTE = 43
    MAYOR = 44
    MENOR = 45
    MAYOR_IGUAL = 46
    MENOR_IGUAL = 47
    AND = 48
    OR = 49
    NOT = 50
    VERDADERO = 51
    FALSO = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'crear'", "'entero'", "'flotante'", "'cadena'", "'booleano'", 
            "'si'", "'entonces'", "'sino'", "'para'", "'hasta'", "'incremento'", 
            "'decremento'", "'mientras'", "'funcion'", "'retornar'", "'inicio'", 
            "'fin'", "'arreglo'", "'matriz'", "'leer'", "'escribir'", "'+'", 
            "'-'", "'*'", "'/'", "'='", "'('", "')'", "':'", "','", "';'", 
            "'['", "']'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
            "'y'", "'o'", "'no'", "'verdadero'", "'falso'" ]

    symbolicNames = [ "<INVALID>",
            "CREAR", "ENTERO", "FLOTANTE", "CADENA", "BOOLEANO", "SI", "ENTONCES", 
            "SINO", "PARA", "HASTA", "INCREMENTO", "DECREMENTO", "MIENTRAS", 
            "FUNCION", "RETORNAR", "INICIO", "FIN", "ARREGLO", "MATRIZ", 
            "LEER", "ESCRIBIR", "ID", "CONT", "FLOAT", "STRING", "PLUS", 
            "MINUS", "MULT", "DIVI", "EQUALS", "LPAREN", "RPAREN", "COLON", 
            "COMMA", "SEMICOLON", "LBRACKET", "RBRACKET", "WS", "INDENT", 
            "NEWLINE", "COMMENT", "IGUAL", "DIFERENTE", "MAYOR", "MENOR", 
            "MAYOR_IGUAL", "MENOR_IGUAL", "AND", "OR", "NOT", "VERDADERO", 
            "FALSO" ]

    ruleNames = [ "CREAR", "ENTERO", "FLOTANTE", "CADENA", "BOOLEANO", "SI", 
                  "ENTONCES", "SINO", "PARA", "HASTA", "INCREMENTO", "DECREMENTO", 
                  "MIENTRAS", "FUNCION", "RETORNAR", "INICIO", "FIN", "ARREGLO", 
                  "MATRIZ", "LEER", "ESCRIBIR", "ID", "CONT", "FLOAT", "STRING", 
                  "PLUS", "MINUS", "MULT", "DIVI", "EQUALS", "LPAREN", "RPAREN", 
                  "COLON", "COMMA", "SEMICOLON", "LBRACKET", "RBRACKET", 
                  "WS", "INDENT", "NEWLINE", "COMMENT", "IGUAL", "DIFERENTE", 
                  "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", "AND", 
                  "OR", "NOT", "VERDADERO", "FALSO" ]

    grammarFileName = "grammarProyecto.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


